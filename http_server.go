package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

// HTTPServer –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è API
type HTTPServer struct {
	port       string
	httpClient *HTTPClient
}

// NewHTTPServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π HTTP —Å–µ—Ä–≤–µ—Ä
func NewHTTPServer(port string) *HTTPServer {
	return &HTTPServer{
		port:       port,
		httpClient: NewHTTPClient(""), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥–µ–Ω—Ç–∞ —Å Yandex GPT
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä
func (s *HTTPServer) Start() error {
	http.HandleFunc("/chat", s.handleChat)
	http.HandleFunc("/health", s.handleHealth)
	http.HandleFunc("/", s.handleRoot)

	log.Printf("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", s.port)
	return http.ListenAndServe(":"+s.port, nil)
}

// handleChat –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ /chat
func (s *HTTPServer) handleChat(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}

	var req Request
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π JSON", http.StatusBadRequest)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ HTTP –∫–ª–∏–µ–Ω—Ç
	response, err := s.httpClient.SendRequest(req.Message, req.UserID)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: %v", err), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// handleHealth –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ /health
func (s *HTTPServer) handleHealth(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"status": "ok",
		"service": "chat-agent-api",
	})
}

// handleRoot –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ø—É—Ç–∏
func (s *HTTPServer) handleRoot(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "text/html")
	fmt.Fprintf(w, `
<!DOCTYPE html>
<html>
<head>
    <title>Chat Agent API</title>
    <meta charset="utf-8">
</head>
<body>
    <h1>ü§ñ Chat Agent API</h1>
    <p>API –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞</p>
    
    <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
    <ul>
        <li><strong>POST /chat</strong> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É</li>
        <li><strong>GET /health</strong> - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞</li>
    </ul>
    
    <h2>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ /chat:</h2>
    <pre>
{
    "message": "–ü—Ä–∏–≤–µ—Ç!",
    "user_id": 12345
}
    </pre>
    
    <h2>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:</h2>
    <pre>
{
    "answer": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
    "status": "success"
}
    </pre>
</body>
</html>
    `)
}

