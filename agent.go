package main

import (
	"fmt"
	"log"
	"strings"
	"time"
)

// Agent –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
type Agent struct {
	conversationHistory map[int64][]ConversationEntry
	tools               map[string]Tool
	yandexGPT           *YandexGPTClient
	useYandexGPT        bool
}

// ConversationEntry –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
type ConversationEntry struct {
	Message   string
	Response  string
	Timestamp time.Time
}

// Tool –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç
type Tool struct {
	Name        string
	Description string
	Handler     func(string, int64) (string, error)
}

// NewAgent —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
func NewAgent() *Agent {
	agent := &Agent{
		conversationHistory: make(map[int64][]ConversationEntry),
		tools:               make(map[string]Tool),
		useYandexGPT:        false,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
	agent.registerTools()

	return agent
}

// NewAgentWithYandexGPT —Å–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Yandex GPT
func NewAgentWithYandexGPT(apiKey, folderID string) *Agent {
	agent := &Agent{
		conversationHistory: make(map[int64][]ConversationEntry),
		tools:               make(map[string]Tool),
		yandexGPT:           NewYandexGPTClient(apiKey, folderID),
		useYandexGPT:        true,
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
	agent.registerTools()

	return agent
}

// registerTools —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≥–µ–Ω—Ç–∞
func (a *Agent) registerTools() {
	a.tools["weather"] = Tool{
		Name:        "weather",
		Description: "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ",
		Handler:     a.handleWeatherRequest,
	}

	a.tools["time"] = Tool{
		Name:        "time",
		Description: "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
		Handler:     a.handleTimeRequest,
	}

	a.tools["calculate"] = Tool{
		Name:        "calculate",
		Description: "–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
		Handler:     a.handleCalculateRequest,
	}

	a.tools["help"] = Tool{
		Name:        "help",
		Description: "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
		Handler:     a.handleHelpRequest,
	}
}

// ProcessMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (a *Agent) ProcessMessage(message string, userID int64) (string, error) {
	log.Printf("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", userID, message)

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
	a.addToHistory(userID, message, "")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
	toolName := a.determineTool(message)
	
	var response string
	var err error

	// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω Yandex GPT –∏ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
	if a.useYandexGPT && a.yandexGPT != nil && toolName == "general" {
		response, err = a.yandexGPT.GenerateResponse(message, userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ Yandex GPT, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: %v", err)
			// Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
			response = a.generateGeneralResponse(message)
			err = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –µ—ë
		}
	} else if tool, exists := a.tools[toolName]; exists {
		response, err = tool.Handler(message, userID)
	} else {
		// –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
		response = a.generateGeneralResponse(message)
	}

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", nil
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –æ—Ç–≤–µ—Ç–æ–º
	a.updateLastResponse(userID, response)

	return response, nil
}

// determineTool –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (a *Agent) determineTool(message string) string {
	message = strings.ToLower(message)

	// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	if strings.Contains(message, "–ø–æ–≥–æ–¥–∞") || strings.Contains(message, "weather") {
		return "weather"
	}
	if strings.Contains(message, "–≤—Ä–µ–º—è") || strings.Contains(message, "time") || 
	   strings.Contains(message, "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏") {
		return "time"
	}
	if strings.Contains(message, "–≤—ã—á–∏—Å–ª–∏") || strings.Contains(message, "calculate") || 
	   strings.Contains(message, "—Å–ª–æ–∂–∏") || strings.Contains(message, "—É–º–Ω–æ–∂—å") {
		return "calculate"
	}
	if strings.Contains(message, "–ø–æ–º–æ—â—å") || strings.Contains(message, "help") || 
	   strings.Contains(message, "–∫–æ–º–∞–Ω–¥—ã") || strings.HasPrefix(message, "/help") {
		return "help"
	}

	return "general"
}

// generateGeneralResponse –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
func (a *Agent) generateGeneralResponse(message string) string {
	responses := []string{
		"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
		"–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ, –≤—Ä–µ–º–µ–Ω–∏, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
		"–•–æ—Ä–æ—à–æ! –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, /weather - –ø–æ–≥–æ–¥–∞, /time - –≤—Ä–µ–º—è.",
		"–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–≥–æ–¥–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.",
	}

	// –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
	index := len(message) % len(responses)
	return responses[index]
}

// addToHistory –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
func (a *Agent) addToHistory(userID int64, message, response string) {
	if a.conversationHistory[userID] == nil {
		a.conversationHistory[userID] = make([]ConversationEntry, 0)
	}

	a.conversationHistory[userID] = append(a.conversationHistory[userID], ConversationEntry{
		Message:   message,
		Response:  response,
		Timestamp: time.Now(),
	})

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
	if len(a.conversationHistory[userID]) > 10 {
		a.conversationHistory[userID] = a.conversationHistory[userID][len(a.conversationHistory[userID])-10:]
	}
}

// updateLastResponse –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
func (a *Agent) updateLastResponse(userID int64, response string) {
	if history, exists := a.conversationHistory[userID]; exists && len(history) > 0 {
		history[len(history)-1].Response = response
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

func (a *Agent) handleWeatherRequest(message string, userID int64) (string, error) {
	return "üå§Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã. –ù–æ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!", nil
}

func (a *Agent) handleTimeRequest(message string, userID int64) (string, error) {
	currentTime := time.Now().Format("15:04:05")
	currentDate := time.Now().Format("02.01.2006")
	return fmt.Sprintf("üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: %s\nüìÖ –î–∞—Ç–∞: %s", currentTime, currentDate), nil
}

func (a *Agent) handleCalculateRequest(message string, userID int64) (string, error) {
	// –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	message = strings.ToLower(message)
	
	// –ò—â–µ–º —á–∏—Å–ª–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
	if strings.Contains(message, "+") {
		return "‚ûï –î–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '2 + 3'. –Ø –ø–æ–∫–∞ —É—á—É—Å—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ! üòä", nil
	}
	if strings.Contains(message, "-") {
		return "‚ûñ –î–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '5 - 2'. –Ø –ø–æ–∫–∞ —É—á—É—Å—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ! üòä", nil
	}
	if strings.Contains(message, "*") || strings.Contains(message, "√ó") {
		return "‚úñÔ∏è –î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '3 * 4'. –Ø –ø–æ–∫–∞ —É—á—É—Å—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ! üòä", nil
	}
	if strings.Contains(message, "/") || strings.Contains(message, "√∑") {
		return "‚ûó –î–ª—è –¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '8 / 2'. –Ø –ø–æ–∫–∞ —É—á—É—Å—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ! üòä", nil
	}
	
	return "üßÆ –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /calculate –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã—á–∏—Å–ª–∏ 2+2'", nil
}

func (a *Agent) handleHelpRequest(message string, userID int64) (string, error) {
	helpText := `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/weather - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ
/time - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
/calculate - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?"
‚Ä¢ "–í—ã—á–∏—Å–ª–∏ 2+2"
‚Ä¢ "–ü–æ–º–æ—â—å"

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º! üòä`

	return helpText, nil
}

