package main

import (
	"log"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// TelegramBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type TelegramBot struct {
	bot        *tgbotapi.BotAPI
	httpClient *HTTPClient
}

// NewTelegramBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
func NewTelegramBot(token string) *TelegramBot {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API
	apiURL := os.Getenv("EXTERNAL_API_URL")
	httpClient := NewHTTPClient(apiURL)

	return &TelegramBot{
		bot:        bot,
		httpClient: httpClient,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (tb *TelegramBot) Start() error {
	log.Printf("–ë–æ—Ç @%s –∑–∞–ø—É—â–µ–Ω", tb.bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tb.bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	for update := range updates {
		if update.Message != nil {
			go tb.handleMessage(update.Message)
		}
	}

	return nil
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (tb *TelegramBot) handleMessage(message *tgbotapi.Message) {
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s (%d): %s", 
		message.From.UserName, message.From.ID, message.Text)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
	if message.IsCommand() {
		tb.handleCommand(message)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	tb.handleTextMessage(message)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (tb *TelegramBot) handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		tb.sendMessage(message.Chat.ID, 
			"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"+
			"–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"+
			"‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ\n"+
			"‚Ä¢ –¢–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º\n"+
			"‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏\n"+
			"‚Ä¢ –ò –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!\n\n"+
			"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
		
	case "help":
		response, _ := tb.httpClient.SendRequest("/help", message.From.ID)
		tb.sendMessage(message.Chat.ID, response.Answer)
		
	case "weather":
		response, _ := tb.httpClient.SendRequest("–ø–æ–≥–æ–¥–∞", message.From.ID)
		tb.sendMessage(message.Chat.ID, response.Answer)
		
	case "time":
		response, _ := tb.httpClient.SendRequest("–≤—Ä–µ–º—è", message.From.ID)
		tb.sendMessage(message.Chat.ID, response.Answer)
		
	case "calculate":
		tb.sendMessage(message.Chat.ID, 
			"üßÆ –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"+
			"‚Ä¢ 2 + 3\n"+
			"‚Ä¢ 10 - 5\n"+
			"‚Ä¢ 4 * 6\n"+
			"‚Ä¢ 15 / 3")
		
	default:
		tb.sendMessage(message.Chat.ID, 
			"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
	}
}

// handleTextMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (tb *TelegramBot) handleTextMessage(message *tgbotapi.Message) {
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
	tb.sendTypingAction(message.Chat.ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ HTTP –∫–ª–∏–µ–Ω—Ç
	response, err := tb.httpClient.SendRequest(message.Text, message.From.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		tb.sendMessage(message.Chat.ID, 
			"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	tb.sendMessage(message.Chat.ID, response.Answer)
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (tb *TelegramBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	
	if _, err := tb.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// sendTypingAction –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
func (tb *TelegramBot) sendTypingAction(chatID int64) {
	action := tgbotapi.NewChatAction(chatID, "typing")
	tb.bot.Send(action)
}

// sendMessageWithKeyboard –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
func (tb *TelegramBot) sendMessageWithKeyboard(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞"),
			tgbotapi.NewKeyboardButton("üïê –í—Ä–µ–º—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏—è"),
			tgbotapi.NewKeyboardButton("‚ùì –ü–æ–º–æ—â—å"),
		),
	)
	keyboard.OneTimeKeyboard = true
	msg.ReplyMarkup = keyboard
	
	if _, err := tb.bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: %v", err)
	}
}

